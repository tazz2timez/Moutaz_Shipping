// <auto-generated />
using System;
using DataAccessLibraray.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLibraray.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241026121803_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLibraray.UserModels.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("DataAccessLibraray.UserModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domains.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Exception")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Level")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MessageTemplate")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Properties")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Domains.Models.TbSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("KiloMeterRate")
                        .HasColumnType("float");

                    b.Property<double?>("KilooGramRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("TbSettings");
                });

            modelBuilder.Entity("Domains.Models.baseTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("Date");

                    b.Property<int>("CurrentState")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Value")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domains.Models.TbCarrier", b =>
                {
                    b.HasBaseType("Domains.Models.baseTable");

                    b.Property<string>("CarrierName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.ToTable("TbCarriers");
                });

            modelBuilder.Entity("Domains.Models.TbCity", b =>
                {
                    b.HasBaseType("Domains.Models.baseTable");

                    b.Property<string>("CityAname")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CityEname")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CountryId");

                    b.ToTable("TbCities");
                });

            modelBuilder.Entity("Domains.Models.TbCountry", b =>
                {
                    b.HasBaseType("Domains.Models.baseTable");

                    b.Property<string>("CountryAname")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CountryEname")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.ToTable("TbCountries", (string)null);
                });

            modelBuilder.Entity("Domains.Models.TbPaymentMethod", b =>
                {
                    b.HasBaseType("Domains.Models.baseTable");

                    b.Property<double?>("Commission")
                        .HasColumnType("float");

                    b.Property<string>("MethdAname")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MethodEname")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.ToTable("TbPaymentMethods");
                });

            modelBuilder.Entity("Domains.Models.TbShippingType", b =>
                {
                    b.HasBaseType("Domains.Models.baseTable");

                    b.Property<double>("ShippingFactor")
                        .HasColumnType("float");

                    b.Property<string>("ShippingTypeAname")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShippingTypeEname")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.ToTable("TbShippingTypes");
                });

            modelBuilder.Entity("Domains.Models.TbShippment", b =>
                {
                    b.HasBaseType("Domains.Models.baseTable");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<decimal>("PackageValue")
                        .HasColumnType("decimal(8,2)");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("ShippingRate")
                        .HasColumnType("decimal(8,2)");

                    b.Property<Guid>("ShippingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("TrackingNumber")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("ShippingTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("TbShippments", (string)null);
                });

            modelBuilder.Entity("Domains.Models.TbShippmentStatus", b =>
                {
                    b.HasBaseType("Domains.Models.baseTable");

                    b.Property<Guid>("CarrierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ShippmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CarrierId");

                    b.HasIndex("ShippmentId");

                    b.ToTable("TbShippmentStatuses", (string)null);
                });

            modelBuilder.Entity("Domains.Models.TbSubscriptionPackage", b =>
                {
                    b.HasBaseType("Domains.Models.baseTable");

                    b.Property<double>("NumberOfKiloMeters")
                        .HasColumnType("float");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ShippimentCount")
                        .HasColumnType("int");

                    b.Property<double>("TotalWeight")
                        .HasColumnType("float");

                    b.ToTable("TbSubscriptionPackages", (string)null);
                });

            modelBuilder.Entity("Domains.Models.TbUserReceiver", b =>
                {
                    b.HasBaseType("Domains.Models.baseTable");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("TbUserReceivers", (string)null);
                });

            modelBuilder.Entity("Domains.Models.TbUserSender", b =>
                {
                    b.HasBaseType("Domains.Models.baseTable");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("TbUserSenders", (string)null);
                });

            modelBuilder.Entity("Domains.Models.TbUserSubscription", b =>
                {
                    b.HasBaseType("Domains.Models.baseTable");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubscriptionDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("TbUserSubscriptions", (string)null);
                });

            modelBuilder.Entity("Domains.Models.baseTable", b =>
                {
                    b.HasOne("DataAccessLibraray.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLibraray.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("DataAccessLibraray.UserModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DataAccessLibraray.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DataAccessLibraray.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("DataAccessLibraray.UserModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLibraray.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DataAccessLibraray.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domains.Models.TbCity", b =>
                {
                    b.HasOne("Domains.Models.TbCountry", "TbCountry")
                        .WithMany("TbCities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TbCountry");
                });

            modelBuilder.Entity("Domains.Models.TbShippment", b =>
                {
                    b.HasOne("Domains.Models.TbPaymentMethod", "TbPaymentMethod")
                        .WithMany("TbShippments")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("Domains.Models.TbUserReceiver", "TbReceiver")
                        .WithMany("TbShippments")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domains.Models.TbUserSender", "TbSender")
                        .WithMany("TbShippments")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domains.Models.TbShippingType", "TbShippingType")
                        .WithMany("TbShippments")
                        .HasForeignKey("ShippingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLibraray.UserModels.ApplicationUser", null)
                        .WithMany("TbShippments")
                        .HasForeignKey("UserId");

                    b.Navigation("TbPaymentMethod");

                    b.Navigation("TbReceiver");

                    b.Navigation("TbSender");

                    b.Navigation("TbShippingType");
                });

            modelBuilder.Entity("Domains.Models.TbShippmentStatus", b =>
                {
                    b.HasOne("Domains.Models.TbCarrier", "TbCarrier")
                        .WithMany("TbShippmentStatuses")
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domains.Models.TbShippment", "TbShippment")
                        .WithMany("TbShippmentStatuses")
                        .HasForeignKey("ShippmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TbCarrier");

                    b.Navigation("TbShippment");
                });

            modelBuilder.Entity("Domains.Models.TbUserReceiver", b =>
                {
                    b.HasOne("Domains.Models.TbCity", "City")
                        .WithMany("TbUserReceivers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLibraray.UserModels.ApplicationUser", null)
                        .WithMany("TbReceivers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domains.Models.TbUserSender", b =>
                {
                    b.HasOne("Domains.Models.TbCity", "City")
                        .WithMany("TbUserSenders")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLibraray.UserModels.ApplicationUser", null)
                        .WithMany("TbSenders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domains.Models.TbUserSubscription", b =>
                {
                    b.HasOne("Domains.Models.TbSubscriptionPackage", "TbPackage")
                        .WithMany("TbUserSubscriptions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLibraray.UserModels.ApplicationUser", null)
                        .WithMany("TbUserSubscriptions")
                        .HasForeignKey("UserId");

                    b.Navigation("TbPackage");
                });

            modelBuilder.Entity("DataAccessLibraray.UserModels.ApplicationUser", b =>
                {
                    b.Navigation("TbReceivers");

                    b.Navigation("TbSenders");

                    b.Navigation("TbShippments");

                    b.Navigation("TbUserSubscriptions");
                });

            modelBuilder.Entity("Domains.Models.TbCarrier", b =>
                {
                    b.Navigation("TbShippmentStatuses");
                });

            modelBuilder.Entity("Domains.Models.TbCity", b =>
                {
                    b.Navigation("TbUserReceivers");

                    b.Navigation("TbUserSenders");
                });

            modelBuilder.Entity("Domains.Models.TbCountry", b =>
                {
                    b.Navigation("TbCities");
                });

            modelBuilder.Entity("Domains.Models.TbPaymentMethod", b =>
                {
                    b.Navigation("TbShippments");
                });

            modelBuilder.Entity("Domains.Models.TbShippingType", b =>
                {
                    b.Navigation("TbShippments");
                });

            modelBuilder.Entity("Domains.Models.TbShippment", b =>
                {
                    b.Navigation("TbShippmentStatuses");
                });

            modelBuilder.Entity("Domains.Models.TbSubscriptionPackage", b =>
                {
                    b.Navigation("TbUserSubscriptions");
                });

            modelBuilder.Entity("Domains.Models.TbUserReceiver", b =>
                {
                    b.Navigation("TbShippments");
                });

            modelBuilder.Entity("Domains.Models.TbUserSender", b =>
                {
                    b.Navigation("TbShippments");
                });
#pragma warning restore 612, 618
        }
    }
}
